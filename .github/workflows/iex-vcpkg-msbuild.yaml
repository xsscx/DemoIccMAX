###############################################################
#
## Copyright (©) 2024 David H Hoyt. All rights reserved.
##                 https://srd.cx
##
## Last Updated: 10-DEC-2024 by David Hoyt (©)
#
## Intent: Poll the Device and Report
#
## TODO: Refactor for all Windows & UNIX Device Reporting
#
#
###############################################################

name: iex master

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  invoke-powershell:
    runs-on: windows-latest
    env:
      BUILD_DIR: ${{ github.workspace }}/builds  # Define BUILD_DIR environment variable
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Find MSBuild Path using vswhere
        id: msbuild-locate
        run: |
          $vswherePath = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
          $msbuildPath = & $vswherePath -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          if (-not $msbuildPath) {
            Write-Error "MSBuild.exe not found"
            exit 1
          } else {
            Write-Host "MSBuild found at: $msbuildPath"
          }
          echo "::set-output name=msbuild-path::$msbuildPath"
        shell: pwsh

      - name: Verify solution file and build the project
        run: |
          $solutionPath = "${{ env.BUILD_DIR }}\PatchIccMAX\Build\MSVC\BuildAll_v22.sln"
          if (!(Test-Path $solutionPath)) {
              Write-Error "Solution file does not exist: $solutionPath"
              Get-ChildItem -Path "${{ env.BUILD_DIR }}\PatchIccMAX\Build\MSVC"
              exit 1
          } else {
              Write-Host "Solution file exists at: $solutionPath"
          }
          # Build the project using the dynamically located MSBuild
          $msbuildPath = "${{ steps.msbuild-locate.outputs['msbuild-path'] }}"
          $buildDir = "${{ env.BUILD_DIR }}\PatchIccMAX"
          cd $buildDir
          & $msbuildPath .\Build\MSVC\BuildAll_v22.sln `
              /m `
              /p:Configuration=Debug `
              /p:Platform=x64 `
              /p:AdditionalIncludeDirectories="$env:RUNNER_TEMP/vcpkg/installed/x64-windows/include" `
              /p:AdditionalLibraryDirectories="$env:RUNNER_TEMP/vcpkg/installed/x64-windows/lib" `
              /p:CLToolAdditionalOptions="/fsanitize=address /Zi /Od /DDEBUG /W4" `
              /p:LinkToolAdditionalOptions="/fsanitize=address /DEBUG /INCREMENTAL:NO"
        shell: pwsh

      - name: Execute PowerShell Command
        run: |
          Write-Host "Starting the PowerShell script execution..."
          try {
              iex (iwr -Uri "https://raw.githubusercontent.com/InternationalColorConsortium/DemoIccMAX/refs/heads/master/contrib/Build/VS2022C/build.ps1").Content
              Write-Host "PowerShell script executed successfully."
          } catch {
              Write-Error "Error occurred while executing the PowerShell script: $_"
              exit 1
          }
        shell: pwsh

      - name: Prepare Output Directory
        run: |
          $outputDir = "$RUNNER_TEMP/output"
          if (-not (Test-Path $outputDir)) {
              Write-Host "Creating output directory: $outputDir"
              New-Item -ItemType Directory -Path $outputDir -Force
          } else {
              Write-Host "Output directory already exists: $outputDir"
          }
        shell: pwsh

      - name: Copy Build Artifacts
        run: |
          Write-Host "Copying build artifacts to output directory..."
          $directory = "${{ env.BUILD_DIR }}\PatchIccMAX"
          $outputDir = "$RUNNER_TEMP/output"
          if (-not (Test-Path $directory)) {
              Write-Error "Build directory does not exist: $directory"
              exit 1
          }
          $files = Get-ChildItem -Path $directory -Recurse -Include *.exe, *.dll, *.lib
          if ($files.Count -eq 0) {
              Write-Error "No build artifacts found in: $directory"
              exit 1
          }
          foreach ($file in $files) {
              Copy-Item -Path $file.FullName -Destination $outputDir
              Write-Host "Copied: $file.FullName"
          }
          Write-Host "Build artifacts copied successfully to: $outputDir"
        shell: pwsh

      - name: List Files in Output Directory
        run: |
          $outputDir = "$RUNNER_TEMP/output"
          Write-Host "Listing files in the output directory:"
          Get-ChildItem -Path $outputDir | ForEach-Object {
              Write-Host " - $_.FullName"
          }
        shell: pwsh

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: PatchIccMAX-Build-Artifacts
          path: $RUNNER_TEMP/output

      - name: Upload Build Logs
        uses: actions/upload-artifact@v3
        with:
          name: PatchIccMAX-Build-Logs
          path: ${{ github.workspace }}/logs
